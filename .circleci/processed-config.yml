# Orb 'cypress-io/cypress@1' resolved to 'cypress-io/cypress@1.21.0'
version: 2
jobs:
  cypress/run:
    docker:
    - image: cypress/base:12.16.1
    parallelism: 1
    environment:
    - CYPRESS_CACHE_FOLDER: ~/.cache/Cypress
    steps:
    - run:
        command: echo "Assuming dependencies were installed using cypress/install job"
    - attach_workspace:
        at: ~/
    - checkout
    - restore_cache:
        keys:
        - cache-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}
    - run:
        name: Install
        working_directory: ''
        command: |
          if [[ ! -z "yarn install --frozen-lockfile" ]]; then
            echo "Installing using custom command"
            echo "yarn install --frozen-lockfile"
            yarn install --frozen-lockfile
          elif [ "true" = "true" ]; then
            echo "Installing using Yarn"
            yarn install --frozen-lockfile
          elif [ ! -e ./package-lock.json ]; then
            echo "The Cypress orb uses 'npm ci' to install 'node_modules', which requires a 'package-lock.json'."
            echo "A 'package-lock.json' file was not found. Please run 'npm install' in your project,"
            echo "and commit 'package-lock.json' to your repo."
            exit 1
          else
            echo "Installing dependencies using NPM ci"
            npm ci
          fi
    - run:
        name: Verify Cypress
        command: npx cypress verify
        working_directory: ''
    - save_cache:
        key: cache-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}
        paths:
        - ~/.cache
    - persist_to_workspace:
        root: ~/
        paths:
        - project
        - .cache/Cypress
    - run:
        name: Start
        command: yarn workspace @grxy/next start
        background: true
        working_directory: ''
    - run:
        name: Run Cypress tests
        no_output_timeout: 10m
        command: "npx cypress run \\\n   \\\n   \\\n   \\\n  "
        working_directory: ''
  danger:
    docker:
    - image: circleci/node:12
    steps:
    - checkout
    - restore_cache:
        name: Restore Yarn Package Cache
        keys:
        - yarn-packages-{{ checksum "yarn.lock" }}
    - run:
        command: yarn --frozen-lockfile
    - save_cache:
        name: Save Yarn Package Cache
        key: yarn-packages-{{ checksum "yarn.lock" }}
        paths:
        - ~/.cache/yarn
    - run:
        command: yarn danger ci
  lint:
    docker:
    - image: circleci/node:12
    steps:
    - checkout
    - restore_cache:
        name: Restore Yarn Package Cache
        keys:
        - yarn-packages-{{ checksum "yarn.lock" }}
    - run:
        command: yarn --frozen-lockfile
    - save_cache:
        name: Save Yarn Package Cache
        key: yarn-packages-{{ checksum "yarn.lock" }}
        paths:
        - ~/.cache/yarn
    - run:
        command: yarn lint
  release:
    docker:
    - image: circleci/node:12
    steps:
    - checkout
    - restore_cache:
        name: Restore Yarn Package Cache
        keys:
        - yarn-packages-{{ checksum "yarn.lock" }}
    - run:
        command: yarn --frozen-lockfile
    - save_cache:
        name: Save Yarn Package Cache
        key: yarn-packages-{{ checksum "yarn.lock" }}
        paths:
        - ~/.cache/yarn
    - checkout
    - run:
        command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
    - run:
        command: git config --global user.email "andrew@grexa.me"
    - run:
        command: git config --global user.name "Grex"
    - run:
        command: yarn release
  test:
    docker:
    - image: circleci/node:12
    steps:
    - checkout
    - restore_cache:
        name: Restore Yarn Package Cache
        keys:
        - yarn-packages-{{ checksum "yarn.lock" }}
    - run:
        command: yarn --frozen-lockfile
    - save_cache:
        name: Save Yarn Package Cache
        key: yarn-packages-{{ checksum "yarn.lock" }}
        paths:
        - ~/.cache/yarn
    - run:
        command: yarn test --ci --reporters=default --reporters=jest-junit --no-cache
        environment:
          JEST_JUNIT_OUTPUT: reports/jest/results.xml
    - store_test_results:
        path: reports
workflows:
  version: 2
  build:
    jobs:
    - cypress/run
    - danger
    - lint
    - release:
        filters:
          branches:
            only: master
        requires:
        - lint
        - test
    - test

# Original config.yml file:
# version: 2.1
# 
# defaults: &defaults
#     docker:
#         - image: circleci/node:12
# 
# master: &master
#     filters:
#         branches:
#             only: master
# 
# orbs:
#     cypress: cypress-io/cypress@1
#     grxy:
#         commands:
#             install:
#                 steps:
#                     - checkout
#                     - restore_cache:
#                           name: Restore Yarn Package Cache
#                           keys:
#                               - yarn-packages-{{ checksum \"yarn.lock\" }}
#                     - run: yarn --frozen-lockfile
#                     - save_cache:
#                           name: Save Yarn Package Cache
#                           key: yarn-packages-{{ checksum \"yarn.lock\" }}
#                           paths:
#                               - ~/.cache/yarn
#         executors:
#             node:
#                 docker:
#                     - image: circleci/node:12
# 
# jobs:
#     alias:
#         <<: *defaults
#         steps:
#             - grxy/install
#             - run: yarn --silent now alias --token=$NOW_TOKEN
#     build:
#         <<: *defaults
#         steps:
#             - grxy/install
#             - setup_remote_docker:
#                   docker_layer_caching: true
#             - run: echo \"SKIP_PREFLIGHT_CHECK=true\" > ./projects/create-react-app/.env
#             - run: yarn build
#     danger:
#         <<: *defaults
#         steps:
#             - grxy/install
#             - run: yarn danger ci
#     deploy:
#         <<: *defaults
#         steps:
#             - grxy/install
#             - run: yarn --silent now --token=$NOW_TOKEN
#             - run: yarn --silent now --token=$NOW_TOKEN alias grxy-$CIRCLE_SHA1.now.sh
#     lint:
#         <<: *defaults
#         steps:
#             - grxy/install
#             - run: yarn lint
#     release:
#         <<: *defaults
#         steps:
#             - grxy/install
#             - checkout
#             - run: echo \"//registry.npmjs.org/:_authToken=$NPM_TOKEN\" > .npmrc
#             - run: git config --global user.email \"andrew@grexa.me\"
#             - run: git config --global user.name \"Grex\"
#             - run: yarn release
#     test:
#         <<: *defaults
#         steps:
#             - grxy/install
#             - run:
#                   command: yarn test --ci --reporters=default --reporters=jest-junit --no-cache
#                   environment:
#                       JEST_JUNIT_OUTPUT: 'reports/jest/results.xml'
#             - store_test_results:
#                   path: reports
#     test-integration:
#         # docker:
#         #     - image: cypress/browsers:chrome67-ff57
#         # steps:
#         #     - grxy/install
#         #     - run: yarn cypress install
#         #     - run: CYPRESS_baseUrl=https://grxy-$CIRCLE_SHA1.now.sh yarn cypress run
# 
# 
# workflows:
#     version: 2
#     build:
#         jobs:
#             # - alias:
#             #       <<: *master
#             #       requires:
#             #           - deploy
#             #           - release
#             # - build
#             - cypress/run:
#                 executor: cypress/base-12
#                 install-command: yarn install --frozen-lockfile
#                 # requires: cypress/install
#                 start: 'yarn workspace @grxy/next start'
#                 yarn: true
#             - danger
#             # - deploy
#             - lint
#             - release:
#                   <<: *master
#                   requires:
#                       #   - build
#                       - lint
#                       - test
#                       #   - test-integration
#             - test
#             # - test-integration
#             # - test-integration:
#             #       requires:
#             #           - deploy